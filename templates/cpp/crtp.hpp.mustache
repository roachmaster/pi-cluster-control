#ifndef {{HEADER_GUARD}}
#define {{HEADER_GUARD}}

/**
 * @file {{HEADER_FILENAME}}
 * @brief {{DESCRIPTION}}
 */

{{#INCLUDES}}
#include {{{.}}}
{{/INCLUDES}}

namespace {{NAMESPACE}} {

    /**
     * @brief Base class for {{CLASS_NAME}}-like behavior.
     *
{{#has_method}}
     * Derived classes must implement:
{{#METHODS}}
     *   - {{RETURN_TYPE}} {{NAME}}(
{{#PARAMS}}
         {{{DESCRIPTION}}}{{#hasNext}},{{/hasNext}}
{{/PARAMS}}
       ){{#SPECIFIER}} {{SPECIFIER}}{{/SPECIFIER}};
{{/METHODS}}
{{/has_method}}
     */
{{#has_second_template_param}}
    template<typename {{TEMPLATE_PARAM}}, typename {{SECOND_TEMPLATE_PARAM}}>
{{/has_second_template_param}}
{{^has_second_template_param}}
    template<typename {{TEMPLATE_PARAM}}>
{{/has_second_template_param}}
    class {{CLASS_NAME}}
{{#TRAITS}}
    {{#isFirst}}:{{/isFirst}} public {{{NAME}}}{{#hasNext}},
{{/hasNext}}
{{/TRAITS}}
    {
    public:
{{#has_alias}}
{{#ALIASES}}
        using {{NAME}} = {{{TYPE}}};
{{/ALIASES}}
{{/has_alias}}

{{#has_method}}
{{#METHODS}}
        {{{RETURN_TYPE}}} {{{NAME}}}(
{{#PARAMS}}
            {{{DESCRIPTION}}}{{#hasNext}},{{/hasNext}}
{{/PARAMS}}
        ){{#SPECIFIER}} {{SPECIFIER}}{{/SPECIFIER}};
{{/METHODS}}
{{/has_method}}

    protected:
        {{CLASS_NAME}}() = default;
        {{CLASS_NAME}}(const {{CLASS_NAME}}&) = delete;
        {{CLASS_NAME}}& operator=(const {{CLASS_NAME}}&) = delete;

{{#has_internal_storage}}
    private:
{{#INTERNAL_STORAGE}}
        {{{.}}}
{{/INTERNAL_STORAGE}}
{{/has_internal_storage}}
    };

} // namespace {{NAMESPACE}}

#endif // {{HEADER_GUARD}}
#ifndef SCN_1_SCHEMA_DEFINITION_AND_VALIDATION_ACROSS_CONFIG_FILES_SUCCESSFUL_SCHEMA_VALIDATION_HAPPY_PATH_BASE_HPP
#define SCN_1_SCHEMA_DEFINITION_AND_VALIDATION_ACROSS_CONFIG_FILES_SUCCESSFUL_SCHEMA_VALIDATION_HAPPY_PATH_BASE_HPP

#include "abstract_forgeable_scenario.hpp"
#include "cppforge/core/forge/forge_log.hpp"
#include <string>

namespace cppforge::scenarios {

//------------------------------------------------------------------------------
// Autogenerated Base Scenario: Schema Definition and Validation Across Config Files - Successful Schema Validation (Happy Path)
//------------------------------------------------------------------------------

    class scn_1_schema_definition_and_validation_across_config_files_successful_schema_validation_happy_path_base : public cppforge::core::forge::AbstractForgeableScenario {
    public:
        [[nodiscard]] std::string scenarioName() const override {
            return "Successful Schema Validation (Happy Path)";
        }

        void smelt() override {
            given_a_well_formed_yaml_configuration_file_config_example_yaml_that_conforms_to_the_schema_and_has_some_optional_keys_missing();
            when_the_file_is_loaded_into_the_system();
            then_the_contents_are_validated_against_the_predefined_schema_and_default_values_are_applied_with_no_errors_reported();
        }

    protected:
        virtual void given_a_well_formed_yaml_configuration_file_config_example_yaml_that_conforms_to_the_schema_and_has_some_optional_keys_missing() = 0;
        virtual void when_the_file_is_loaded_into_the_system() = 0;
        virtual void then_the_contents_are_validated_against_the_predefined_schema_and_default_values_are_applied_with_no_errors_reported() = 0;

        virtual ~scn_1_schema_definition_and_validation_across_config_files_successful_schema_validation_happy_path_base() = default;
    };

} // namespace cppforge::scenarios

#endif // SCN_1_SCHEMA_DEFINITION_AND_VALIDATION_ACROSS_CONFIG_FILES_SUCCESSFUL_SCHEMA_VALIDATION_HAPPY_PATH_BASE_HPP